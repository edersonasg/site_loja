<html lang="pt-br">

<head>
    <meta name="theme-color" media="(prefers-color-scheme: dark)" content="#181818" />
    <meta name="theme-color" media="(prefers-color-scheme: light)" content="#f3f3f3" />

    <!-- These meta tags are Apple-specific, and set the web application to run in full-screen mode with a black status bar. Learn more at https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/MetaTags.html-->
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-title" content="PWA Starter" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black" />

    <!-- This tag is used by the PWA Starter CLI to identify template projects. Don't remove if you are using the CLI. -->
    <meta name="pwa-starter-template-identity" content="pwa-starter" />
    <link rel="apple-touch-icon" href="images/logo1.png">
    <link rel="icon" sizes="196x196" href="images/logo1.png">

    <!--pwa-->

    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="manifest" href="/manifest.json">
    <title>Pagina Home</title>
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/style/carrinho.css">
    <link rel="stylesheet" href="/css/style/nav.css">
    <link rel="stylesheet" href="/css/style/footer.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Arimo:wght@600&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js" integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha2/dist/js/bootstrap.min.js" integrity="sha384-heAjqF+bCxXpCWLa6Zhcp4fu20XoNIA98ecBC1YkdXhszjoejr5y9Q77hIrv8R9i" crossorigin="anonymous"></script>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <script src="https://sdk.amazonaws.com/js/aws-sdk-2.861.0.min.js"></script>

</head>

<body>
    <%- include('nav.ejs') %>

        <h1>Photo Album Viewer</h1>
        <div id="viewer">
        </div>

        <%- include('footer.ejs') %>

            <script>
                var albumBucketName = 'bucketgarb';

                // **DO THIS**:
                //   Replace this block of code with the sample code located at:
                //   Cognito -- Manage Identity Pools -- [identity_pool_name] -- Sample Code -- JavaScript
                //
                // Initialize the Amazon Cognito credentials provider
                AWS.config.region = 'us-east-2'; // Regi√£o
                AWS.config.credentials = new AWS.CognitoIdentityCredentials({
                    IdentityPoolId: 'us-east-2:db237e02-158b-4585-9f7c-25782e6491cc',
                });

                // Create a new service object
                var s3 = new AWS.S3({
                    apiVersion: '2006-03-01',
                    params: {
                        Bucket: albumBucketName
                    }
                });

                // A utility function to create HTML.
                function getHtml(template) {
                    return template.join('\n');
                }

                listAlbums();
                //
                // Functions
                //

                // List the photo albums that exist in the bucket.
                function listAlbums() {
                    s3.listObjects({
                        Delimiter: '/'
                    }, function(err, data) {
                        if (err) {
                            return alert('There was an error listing your albums: ' + err.message);
                        } else {
                            var albums = data.CommonPrefixes.map(function(commonPrefix) {
                                var prefix = commonPrefix.Prefix;
                                var albumName = decodeURIComponent(prefix.replace('/', ''));
                                return getHtml([
                                    '<li>',
                                    '<button style="margin:5px;" onclick="viewAlbum(\'' + albumName + '\')">',
                                    albumName,
                                    '</button>',
                                    '</li>'
                                ]);
                            });
                            var message = albums.length ?
                                getHtml([
                                    '<p>Click on an album name to view it.</p>',
                                ]) :
                                '<p>You do not have any albums. Please Create album.';
                            var htmlTemplate = [
                                '<h2>Albums</h2>',
                                message,
                                '<ul>',
                                getHtml(albums),
                                '</ul>',
                            ]
                            document.getElementById('viewer').innerHTML = getHtml(htmlTemplate);
                        }
                    });
                }

                // Show the photos that exist in an album.
                function viewAlbum(albumName) {
                    var albumPhotosKey = encodeURIComponent(albumName) + '/';
                    s3.listObjects({
                        Prefix: albumPhotosKey
                    }, function(err, data) {
                        if (err) {
                            return alert('There was an error viewing your album: ' + err.message);
                        }
                        // 'this' references the AWS.Request instance that represents the response
                        var href = this.request.httpRequest.endpoint.href;
                        var bucketUrl = href + albumBucketName + '/';

                        var photos = data.Contents.map(function(photo) {
                            var photoKey = photo.Key;
                            var photoUrl = bucketUrl + encodeURIComponent(photoKey);
                            return getHtml([
                                '<span>',
                                '<div>',
                                '<br/>',
                                '<img style="width:128px;height:128px;" src="' + photoUrl + '"/>',
                                '</div>',
                                '<div>',
                                '<span>',
                                photoKey.replace(albumPhotosKey, ''),
                                '</span>',
                                '</div>',
                                '</span>',
                            ]);
                        });
                        var message = photos.length ?
                            '<p>The following photos are present.</p>' :
                            '<p>There are no photos in this album.</p>';
                        var htmlTemplate = [
                            '<div>',
                            '<button onclick="listAlbums()">',
                            'Back To Albums',
                            '</button>',
                            '</div>',
                            '<h2>',
                            'Album: ' + albumName,
                            '</h2>',
                            message,
                            '<div>',
                            getHtml(photos),
                            '</div>',
                            '<h2>',
                            'End of Album: ' + albumName,
                            '</h2>',
                            '<div>',
                            '<button onclick="listAlbums()">',
                            'Back To Albums',
                            '</button>',
                            '</div>',
                        ]
                        document.getElementById('viewer').innerHTML = getHtml(htmlTemplate);
                        document.getElementsByTagName('img')[0].setAttribute('style', 'display:none;');
                    });
                }
            </script>
</body>