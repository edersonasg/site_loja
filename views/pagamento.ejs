<html lang="pt-br">

<head>
    <%- include('head.ejs') %>
        <link rel="stylesheet" href="/css/style/pagamento.css">
        <script src="https://sdk.mercadopago.com/js/v2"></script>
</head>

<body>
    <%- include('nav.ejs') %>
        <div id="cardPaymentBrick_container" class="cartao"></div>
        <div id="statusScreenBrick_container" class="resultCartao"></div>
        <script>

            const mp = new MercadoPago('TEST-86720bd8-b17d-4ce8-91ed-dc6b75677a19');
            const bricksBuilder = mp.bricks();
            const renderCardPaymentBrick = async (bricksBuilder) => {
                const settings = {
                    initialization: {
                        amount: 100, // valor total a ser pago
                        payer: {
                            email: "",
                        },
                    },
                    customization: {
                        visual: {
                            style: {
                                theme: 'default', // | 'dark' | 'bootstrap' | 'flat'
                            }
                        },
                    },
                    callbacks: {
                        onReady: () => {
                            // callback chamado quando o Brick estiver pronto
                        },
                        onSubmit: (cardFormData) => {
                            //  callback chamado o usuário clicar no botão de submissão dos dados
                            //  exemplo de envio dos dados coletados pelo Brick para seu servidor
                            return new Promise((resolve, reject) => {
                                fetch("/process_payment", {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json",
                                    },
                                    body: JSON.stringify(cardFormData)
                                })
                                    .then(async (response) => {
                                        // receber o resultado do pagamento
                                        const resposta = await response.json();
                                        console.log(resposta);

                                        if (resposta.code == 3034) {
                                            const erroCartao = document.getElementById("card-number-container");
                                            erroCartao.style.setProperty("--color", "red");
                                            erroCartao.style.borderBottom = "2px solid red";
                                            erroCartao.placeholder = 'Cartão Inválido';
                                            reject();
                                            return
                                        } else {
                                            resultado(resposta.id);
                                        }
                                    })
                                    .catch(async (error) => {
                                        reject();
                                    })
                            });
                        },
                        onError: (error) => {
                            // callback chamado para todos os casos de erro do Brick
                        },
                    },
                };
                window.cardPaymentBrickController = await bricksBuilder.create('cardPayment', 'cardPaymentBrick_container', settings);
            };
            renderCardPaymentBrick(bricksBuilder);

            async function resultado(id) {
                document.getElementById("cardPaymentBrick_container").style.display = "none";
                const renderStatusScreenBrick = async (bricksBuilder) => {
                    const settings = {
                        initialization: {
                            paymentId: id, // id do pagamento a ser mostrado
                        },
                        callbacks: {
                            onReady: () => {
                                /*
                                  Callback chamado quando o Brick estiver pronto.
                                  Aqui você pode ocultar loadings do seu site, por exemplo.
                                */
                            },
                            onError: (error) => {
                                // callback chamado para todos os casos de erro do Brick
                                console.error(error);
                            },
                        },
                    };
                    window.statusScreenBrickController = await bricksBuilder.create(
                        'statusScreen',
                        'statusScreenBrick_container',
                        settings,
                    );
                };
                document.getElementById("statusScreenBrick_container").style.display = "block";
                renderStatusScreenBrick(bricksBuilder);
            }
        </script>
</body>

</html>